=SUM(IF(FREQUENCY(IF(LEFT(B2:B100, 3) = "PRM", MATCH(B2:B100, B2:B100, 0)), IF(LEFT(B2:B100, 3) = "PRM", MATCH(B2:B100, B2:B100, 0)))>0, 1))


joblib==1.4.0
numpy==1.25.2
scipy==1.11.4
pandas==2.0.3
protobuf==3.20.3
scikit_learn==1.2.2
streamlit==1.29.0

Sub FormatRows()
    Dim ws As Worksheet
    Dim lastCol As Long
    Dim i As Long
    Dim upperRow As String
    Dim lowerRow As String
    
    ' Set the worksheet to the active sheet
    Set ws = ActiveSheet
    
    ' Find the last column with data in the first row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' Loop through each cell in the rows
    For i = 1 To lastCol
        ' Get the values from the first and second rows
        upperRow = ws.Cells(1, i).Value
        lowerRow = ws.Cells(2, i).Value
        
        ' Combine them in the desired format and write to the third row
        ws.Cells(3, i).Value = "'" & upperRow & "' as '" & lowerRow & "'"
    Next i
End Sub

COALESCE((CASE WHEN Final Overlier/Underlier Price (USD) = 0 THEN '' ELSE Final Overlier/Underlier Price (USD) END), Decomposed Overlier/Underlier Price (USD)) AS Final Overlier/Underlier Price (USD)

WHERE col1 <> '0'
AND col1 RLIKE '^[0-9]*\\.?[0-9]+$';

Documenting a program is crucial as it ensures that the code is understandable, maintainable, and usable by others. Clear documentation helps in preserving the developer's intent, making it easier for future developers to debug, extend, and optimize the code. It also facilitates collaboration, knowledge transfer, and onboarding of new team members, ultimately leading to more efficient and effective project development and management.


Sub ListSheetNames()
    Dim ws As Worksheet
    Dim i As Integer
    i = 1

    ' Create a new sheet to list the sheet names
    Sheets.Add(After:=Sheets(Sheets.Count)).Name = "SheetNames"

    ' Loop through each sheet in the workbook
    For Each ws In ThisWorkbook.Sheets
        ' Write the sheet name to the new sheet
        Sheets("SheetNames").Cells(i, 1).Value = ws.Name
        i = i + 1
    Next ws
End Sub

SELECT 
    ETI,
    GSN,
    CASE
        WHEN GSN = 'N/A' THEN 
            CASE 
                WHEN COUNT(CASE WHEN GSN <> 'N/A' THEN 1 END) OVER (PARTITION BY ETI) = 0 AND 
                     ROW_NUMBER() OVER (PARTITION BY ETI ORDER BY ETI) = 1 THEN 'Keep'
                ELSE 'Remove'
            END
        ELSE 'Keep'
    END AS filter


CASE
    WHEN `Price` rlike '^-?[0-9]+(\\.[0-9]+)?$' AND cast(`Price` as double) <> 0 THEN "No"
    ELSE "Yes"
END AS `Missing price`

SELECT
    ETI1,
    ETI2,
    CASE
        WHEN ETI1 = ETI2 THEN 'Yes'
        WHEN ETI2 = CONCAT(ETI1, 'A') THEN 'Yes'
        WHEN ETI1 = CONCAT(ETI2, 'A') THEN 'Yes'
        ELSE 'No'
    END AS `Same ETI?`



SELECT
    CASE
        WHEN C2 = '' THEN ''
        WHEN RIGHT(C2, 1) = 'A' THEN 
            CASE
                WHEN LENGTH(C2) - 1 >= 0 THEN SUBSTRING(C2, 1, LENGTH(C2) - 1)
                ELSE ''
            END
        ELSE C2
    END AS result
FROM your_table

=IF(SUMPRODUCT(--(LEFT(A1:A100, FIND(".", A1:A100 & ".") - 1) = B1)) > 0, "Exists", "Does Not Exist")


:: Run the first two batch files
call command1.bat
call command2.bat

:: Open the Excel file
set "excelFile=path\to\your\file.xlsx"
start "" "%excelFile%"

:: Wait for the Excel file to be closed
:waitForExcel
tasklist /fi "imagename eq excel.exe" | find /i "excel.exe" >nul
if not errorlevel 1 (
    echo Waiting for Excel to close...
    timeout /t 5 >nul
    goto waitForExcel
)

:: Continue with the third batch file
call command3.bat
